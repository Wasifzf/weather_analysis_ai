{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.NODE_ENV === 'production' ? '/api' : '';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000\n});\nexport const weatherAPI = {\n  // Get weather data summary\n  getSummary: async () => {\n    const response = await api.get('/data/summary');\n    return response.data.data;\n  },\n  // Get weather data by year range\n  getWeatherByRange: async (startYear, endYear) => {\n    const response = await api.get(`/data/range?start_year=${startYear}&end_year=${endYear}`);\n    return response.data.data;\n  },\n  // Get anomalies\n  getAnomalies: async (severity, limit = 50) => {\n    const params = new URLSearchParams();\n    if (severity) params.append('severity', severity);\n    params.append('limit', limit.toString());\n    const response = await api.get(`/anomalies?${params.toString()}`);\n    return response.data.data;\n  },\n  // Get anomaly timeseries data (notebook style)\n  getAnomalyTimeseries: async (location = 'default') => {\n    const response = await api.get(`/anomalies/timeseries?location=${location}`);\n    return response.data.data;\n  },\n  // Run anomaly detection\n  detectAnomalies: async () => {\n    const response = await api.post('/anomalies/detect');\n    return response.data.data;\n  },\n  // Get AI insights\n  getAIInsights: async () => {\n    const response = await api.get('/ai/insights');\n    return response.data.data;\n  },\n  // Get climate analysis\n  getClimateAnalysis: async () => {\n    const response = await api.get('/ai/climate-analysis');\n    return response.data.data;\n  },\n  // Get dashboard summary\n  getDashboardSummary: async () => {\n    const response = await api.get('/dashboard/summary');\n    return response.data.data;\n  },\n  // Chat with AI (RAG)\n  chatWithAI: async (message, context) => {\n    const response = await api.post('/ai/chat', {\n      message,\n      context: context || null\n    });\n    return response.data.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","NODE_ENV","api","create","baseURL","timeout","weatherAPI","getSummary","response","get","data","getWeatherByRange","startYear","endYear","getAnomalies","severity","limit","params","URLSearchParams","append","toString","getAnomalyTimeseries","location","detectAnomalies","post","getAIInsights","getClimateAnalysis","getDashboardSummary","chatWithAI","message","context"],"sources":["C:/Users/wasif/OneDrive/Desktop/weather app proj/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { APIResponse, WeatherSummary, AnomalyResponse, AIInsights, WeatherData, AnomalyTimeseriesResponse } from '../types';\n\nconst API_BASE_URL = process.env.NODE_ENV === 'production' ? '/api' : '';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n});\n\nexport const weatherAPI = {\n  // Get weather data summary\n  getSummary: async (): Promise<WeatherSummary> => {\n    const response = await api.get<APIResponse<WeatherSummary>>('/data/summary');\n    return response.data.data;\n  },\n\n  // Get weather data by year range\n  getWeatherByRange: async (startYear: number, endYear: number): Promise<{ records: WeatherData[], count: number }> => {\n    const response = await api.get<APIResponse<{ records: WeatherData[], count: number }>>(\n      `/data/range?start_year=${startYear}&end_year=${endYear}`\n    );\n    return response.data.data;\n  },\n\n  // Get anomalies\n  getAnomalies: async (severity?: string, limit: number = 50): Promise<AnomalyResponse> => {\n    const params = new URLSearchParams();\n    if (severity) params.append('severity', severity);\n    params.append('limit', limit.toString());\n    \n    const response = await api.get<APIResponse<AnomalyResponse>>(`/anomalies?${params.toString()}`);\n    return response.data.data;\n  },\n\n  // Get anomaly timeseries data (notebook style)\n  getAnomalyTimeseries: async (location: string = 'default'): Promise<AnomalyTimeseriesResponse> => {\n    const response = await api.get<APIResponse<AnomalyTimeseriesResponse>>(`/anomalies/timeseries?location=${location}`);\n    return response.data.data;\n  },\n\n  // Run anomaly detection\n  detectAnomalies: async (): Promise<any> => {\n    const response = await api.post<APIResponse<any>>('/anomalies/detect');\n    return response.data.data;\n  },\n\n  // Get AI insights\n  getAIInsights: async (): Promise<AIInsights> => {\n    const response = await api.get<APIResponse<AIInsights>>('/ai/insights');\n    return response.data.data;\n  },\n\n  // Get climate analysis\n  getClimateAnalysis: async (): Promise<{ analysis: string }> => {\n    const response = await api.get<APIResponse<{ analysis: string }>>('/ai/climate-analysis');\n    return response.data.data;\n  },\n\n  // Get dashboard summary\n  getDashboardSummary: async (): Promise<any> => {\n    const response = await api.get<APIResponse<any>>('/dashboard/summary');\n    return response.data.data;\n  },\n\n  // Chat with AI (RAG)\n  chatWithAI: async (message: string, context?: any): Promise<{ response: string; confidence?: number; sources?: string[] }> => {\n    const response = await api.post<APIResponse<any>>('/ai/chat', {\n      message,\n      context: context || null\n    });\n    return response.data.data;\n  },\n};\n\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG,MAAM,GAAG,EAAE;AAExE,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,UAAU,GAAG;EACxB;EACAC,UAAU,EAAE,MAAAA,CAAA,KAAqC;IAC/C,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAA8B,eAAe,CAAC;IAC5E,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAC,iBAAiB,EAAE,MAAAA,CAAOC,SAAiB,EAAEC,OAAe,KAAyD;IACnH,MAAML,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAC5B,0BAA0BG,SAAS,aAAaC,OAAO,EACzD,CAAC;IACD,OAAOL,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAI,YAAY,EAAE,MAAAA,CAAOC,QAAiB,EAAEC,KAAa,GAAG,EAAE,KAA+B;IACvF,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpC,IAAIH,QAAQ,EAAEE,MAAM,CAACE,MAAM,CAAC,UAAU,EAAEJ,QAAQ,CAAC;IACjDE,MAAM,CAACE,MAAM,CAAC,OAAO,EAAEH,KAAK,CAACI,QAAQ,CAAC,CAAC,CAAC;IAExC,MAAMZ,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAA+B,cAAcQ,MAAM,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC;IAC/F,OAAOZ,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAW,oBAAoB,EAAE,MAAAA,CAAOC,QAAgB,GAAG,SAAS,KAAyC;IAChG,MAAMd,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAyC,kCAAkCa,QAAQ,EAAE,CAAC;IACpH,OAAOd,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAa,eAAe,EAAE,MAAAA,CAAA,KAA0B;IACzC,MAAMf,QAAQ,GAAG,MAAMN,GAAG,CAACsB,IAAI,CAAmB,mBAAmB,CAAC;IACtE,OAAOhB,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAe,aAAa,EAAE,MAAAA,CAAA,KAAiC;IAC9C,MAAMjB,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAA0B,cAAc,CAAC;IACvE,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAgB,kBAAkB,EAAE,MAAAA,CAAA,KAA2C;IAC7D,MAAMlB,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAoC,sBAAsB,CAAC;IACzF,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAiB,mBAAmB,EAAE,MAAAA,CAAA,KAA0B;IAC7C,MAAMnB,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAmB,oBAAoB,CAAC;IACtE,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACAkB,UAAU,EAAE,MAAAA,CAAOC,OAAe,EAAEC,OAAa,KAA6E;IAC5H,MAAMtB,QAAQ,GAAG,MAAMN,GAAG,CAACsB,IAAI,CAAmB,UAAU,EAAE;MAC5DK,OAAO;MACPC,OAAO,EAAEA,OAAO,IAAI;IACtB,CAAC,CAAC;IACF,OAAOtB,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;AACF,CAAC;AAED,eAAeR,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}